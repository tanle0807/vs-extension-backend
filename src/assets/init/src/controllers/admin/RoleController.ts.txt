import { Controller, UseAuth, Req, Get, Res, Response, HeaderParams, PathParams, Post, BodyParams } from '@tsed/common';
import Joi from '@hapi/joi';
import { Docs } from '@tsed/swagger';
import { Request } from 'express';

import { Validator } from '../../middleware/validator/Validator';
import { VerificationJWT } from '../../middleware/auth/VerificationJWT';
import { Role } from '../../entity/Role';
import { RoleService } from '../../services/RoleService';
import { Permission } from '../../entity/Permission';
import { PermissionImport } from '../../entity-request/PermissionImport';

@Controller("/admin/role")
@Docs("docs_admin")
export class RoleController {
    constructor(private roleService: RoleService) { }

    // =====================CREATE ITEM=====================
    @Post('')
    @UseAuth(VerificationJWT)
    @Validator({
        role: Joi.required(),
        token: Joi.required()
    })
    async create(
        @BodyParams("role") role: Role,
        @HeaderParams("token") token: string,
    ) {
        await role.save()
        return { id: role.id }
    }


    // =====================GET LIST=====================
    @Get('')
    @UseAuth(VerificationJWT)
    @Validator({
    })
    async findAll(
        @Res() res: Response,
        @HeaderParams("token") token: string,
    ) {
        let roles = await Role.find()
        return res.sendOK(roles)
    }


    // =====================IMPORT PERMISSIONS=====================
    @Post('/permissions/import')
    @UseAuth(VerificationJWT)
    @Validator({
        permissions: Joi.required(),
        token: Joi.required()
    })
    async importPermission(
        @BodyParams("permissions", PermissionImport) permissionImports: PermissionImport[],
        @HeaderParams("token") token: string,
    ) {
        let permissions = await this.roleService.import(permissionImports)
        await this.roleService.resetRoleForAdmin(permissions)
        return { message: "Success" }
    }


    // =====================GET PERMISSION=====================
    @Get('/permissions')
    @UseAuth(VerificationJWT)
    @Validator({
        token: Joi.required()
    })
    async getAllPermission(
        @Res() res: Response,
        @HeaderParams("token") token: string,
    ) {
        let permissions = await Permission.find()
        return res.sendOK(permissions)
    }


    // =====================GET ITEM=====================
    @Get('/:roleId')
    @UseAuth(VerificationJWT)
    @Validator({
        roleId: Joi.number().required(),
        token: Joi.required()
    })
    async getRole(
        @PathParams("roleId") roleId: number,
        @HeaderParams("token") token: string,
    ) {
        let role = await Role.findOne(roleId, {
            relations: ["permissions"]
        })
        return role
    }


    // =====================UPDATE ROLE=====================
    @Post('/:roleId/update')
    @UseAuth(VerificationJWT)
    @Validator({
        roleId: Joi.number().required(),
        permissions: Joi.required(),
        token: Joi.required()
    })
    async turnOnPermissionInRole(
        @Res() res: Response,
        @PathParams("roleId") roleId: number,
        @BodyParams("permissions", Permission) permissions: Permission[],
        @BodyParams("info") role: Role,
        @HeaderParams("token") token: string,
    ) {
        roleId = Number(roleId)
        let oldRole = await Role.findOneOrThrowId(roleId)

        role.id = roleId
        role.permissions = permissions
        await role.save()
        return res.sendOK(role)
    }

} // END FILE
